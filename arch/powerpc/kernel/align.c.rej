--- arch/powerpc/kernel/align.c
+++ arch/powerpc/kernel/align.c
@@ -642,14 +642,10 @@
  */
 static int emulate_vsx(unsigned char __user *addr, unsigned int reg,
 		       unsigned int areg, struct pt_regs *regs,
-		       unsigned int flags, unsigned int length,
-		       unsigned int elsize)
+		       unsigned int flags, unsigned int length)
 {
 	char *ptr;
-	unsigned long *lptr;
 	int ret = 0;
-	int sw = 0;
-	int i, j;
 
 	flush_vsx_to_thread(current);
 
@@ -658,35 +654,19 @@
 	else
 		ptr = (char *) &current->thread.vr[reg - 32];
 
-	lptr = (unsigned long *) ptr;
-
-	if (flags & SW)
-		sw = elsize-1;
-
-	for (j = 0; j < length; j += elsize) {
-		for (i = 0; i < elsize; ++i) {
-			if (flags & ST)
-				ret |= __put_user(ptr[i^sw], addr + i);
-			else
-				ret |= __get_user(ptr[i^sw], addr + i);
+	if (flags & ST)
+		ret = __copy_to_user(addr, ptr, length);
+        else {
+		if (flags & SPLT){
+			ret = __copy_from_user(ptr, addr, length);
+			ptr += length;
 		}
-		ptr  += elsize;
-		addr += elsize;
+		ret |= __copy_from_user(ptr, addr, length);
 	}
-
-	if (!ret) {
-		if (flags & U)
-			regs->gpr[areg] = regs->dar;
-
-		/* Splat load copies the same data to top and bottom 8 bytes */
-		if (flags & SPLT)
-			lptr[1] = lptr[0];
-		/* For 8 byte loads, zero the top 8 bytes */
-		else if (!(flags & ST) && (8 == length))
-			lptr[1] = 0;
-	} else
+	if (flags & U)
+		regs->gpr[areg] = regs->dar;
+	if (ret)
 		return -EFAULT;
-
 	return 1;
 }
 #endif
@@ -787,25 +767,16 @@
 
 #ifdef CONFIG_VSX
 	if ((instruction & 0xfc00003e) == 0x7c000018) {
-		unsigned int elsize;
-
-		/* Additional register addressing bit (64 VSX vs 32 FPR/GPR) */
+		/* Additional register addressing bit (64 VSX vs 32 FPR/GPR */
 		reg |= (instruction & 0x1) << 5;
 		/* Simple inline decoder instead of a table */
-		/* VSX has only 8 and 16 byte memory accesses */
-		nb = 8;
 		if (instruction & 0x200)
 			nb = 16;
-
-		/* Vector stores in little-endian mode swap individual
-		   elements, so process them separately */
-		elsize = 4;
-		if (instruction & 0x80)
-			elsize = 8;
-
+		else if (instruction & 0x080)
+			nb = 8;
+		else
+			nb = 4;
 		flags = 0;
-		if (regs->msr & MSR_LE)
-			flags |= SW;
 		if (instruction & 0x100)
 			flags |= ST;
 		if (instruction & 0x040)
@@ -816,7 +787,7 @@
 			nb = 8;
 		}
 		PPC_WARN_EMULATED(vsx);
-		return emulate_vsx(addr, reg, areg, regs, flags, nb, elsize);
+		return emulate_vsx(addr, reg, areg, regs, flags, nb);
 	}
 #endif
 	/* A size of 0 indicates an instruction we don't support, with
